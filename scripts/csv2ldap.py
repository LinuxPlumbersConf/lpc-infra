#!/usr/bin/env python3

# convert CSV generated by cvent to ldap
# requires python-ldap

# TODO:
# * optimize modifications of ldap database and do it in one go
# * record attendee type (speaker, modertor etc) in 'businessCategory'
# * actually track record version in 'pager' field

import sys
import csv
import ldap
import threading
import getpass

csv_fields = ['Name', 'Surname', 'Company', 'Title', 'Registration Type',
              'Last Registration Date (GMT)', 'Current Voucher Code',
              'Discount Code', 'Amount Paid', 'Confirmation Number',
              'Email']

# 'cn' and 'objectClass' are treated separately
ldap_fields = ['givenName', 'sn', 'title', 'organizationName',
               'employeeType', 'userPassword', 'labeledURI', 'mail',
               'pager', 'displayName', 'initials', 'businessCategory']

ldap_modify_fields = ['title', 'organizationName', 'employeeType',
                      'userPassword', 'labeledURI', 'pager',
                      'businessCategory']
#
# LDAP machinery.
#
ldap_search_base = 'dc=users,dc=lpc,dc=events'
ldap_search_filter = '(cn=%s)'
ldap_attrs = ['givenName', 'sn', 'labeledURI', 'businessCategory']
ldap_conn = None
ldap_lock = threading.Lock()


def ldap_connect(passwd):
    LDAP_SERVER = 'ldaps://directory.lpc.events'
    LDAP_USER = 'cn=admin,dc=lpc,dc=events'

    global ldap_conn
    ldap_conn = ldap.initialize(LDAP_SERVER)
    ldap_conn.simple_bind_s(LDAP_USER, passwd)


def ldap_lookup(email):
    with ldap_lock:
        return do_ldap_lookup(email)


def do_ldap_lookup(email):
    #
    # Query the LDAP server.
    #
    ss = ldap_search_filter % (email)
    try:
        results = ldap_conn.search_s(ldap_search_base, ldap.SCOPE_ONELEVEL, ss)
    except ldap.NO_SUCH_OBJECT:
        return None
    if not results:
        return None

    return results[0][1]


def ldap_add(email, dn, ldap_record):
    print("adding %s" % dn)

    mod = []
    for f in ldap_fields:
        mod.append((f, (ldap_record[f] or "none").encode("utf-8")))

    # add the 'cn' fields, one with '@' and another '.' for matrix
    cn = [email.encode("utf-8"), email.replace('@', '.').encode("utf-8")]
    mod.append(('cn', cn))

    # objectClass should be a list rather than string so it is easier to add
    # it manually than bother with conversions
    obj_class = 'inetOrgPerson organizationalPerson person'
    mod.append(('objectClass', obj_class.encode("utf-8").split()))

    ldap_conn.add_s(dn, mod)


def ldap_update(ldap_record):
    email = ldap_record['cn']
    dn = 'cn=%s,%s' % (email, ldap_search_base)

    old = ldap_lookup(email)
    if not old:
        ldap_add(email, dn, ldap_record)
        return

    print("updating %s" % dn)
    mod = []
    op = ldap.MOD_REPLACE
    for f in ldap_modify_fields:
        mod.append((op, f, ldap_record[f].encode("utf-8")))

    ldap_conn.modify(dn, mod)


def csv_to_ldap(csv):
    display_name = "%s %s" % (csv['Name'], csv['Surname'])
    ldap_record = {
        'cn':                   csv['Email'],
        'givenName':            csv['Name'],
        'sn':                   csv['Surname'],
        'title':                csv['Title'],
        'organizationName':     csv['Company'],
        'userPassword':         csv['Confirmation Number'],
        'labeledURI':           csv['Confirmation Number'],
        'mail':                 csv['Email'],
        'employeeType':         csv['Registration Type'],
        'displayName':          display_name,
        'initials':             display_name,
        'pager':                '100000',     # FIXME: import version tracking
        'businessCategory':     'Attendee',   # FIXME: speaker/moderator/etc
    }

    return ldap_record


def read_csv(filename):
    with open(filename, "r") as file:
        data = list(csv.reader(file, delimiter=","))

    reg_list = []
    for line in data[1:]:
        reg = dict(zip(csv_fields, line))
        reg_list.append(reg)

    return reg_list


def usage(args):
    print("Usage: %s <filename>" % args[0])


def main(args):
    if len(args) != 2:
        usage(args)
        sys.exit(1)

    reg_list = read_csv(args[1])
    ldap_records = [csv_to_ldap(x) for x in reg_list]

    passwd = getpass.getpass()
    ldap_connect(passwd)

    for r in ldap_records:
        ldap_update(r)


if __name__ == '__main__':
    main(sys.argv)
